import { Injectable } from '@angular/core';
import {ActivatedRoute} from "@angular/router";
import {Observable, Subject} from "rxjs/Rx";
import {isNumber} from "util";
import {MatSnackBar} from "@angular/material";
import {catchError} from "rxjs/internal/operators";
import {HttpClient} from "@angular/common/http";



@Injectable({
    providedIn: 'root'
})
export class StorageService {

    url: any;
    storageProjectKey: string;
    _item: any = null;
    change: Subject<any> = new Subject();

    constructor(
        public route: ActivatedRoute,
        public snackBar: MatSnackBar,
        public http: HttpClient,
    ) {}

    _setItem(item: any) {
        this._item = item;
        if(item) {
            localStorage.setItem(this.storageProjectKey, item.pk.toString());
        } else {
            localStorage.removeItem(this.storageProjectKey);
        }
        this.change.next(item);
    }

    setItem(item: any) {
        if(isNumber(item)) {
            this.http.get(`${this.url}${item}/`)
                .pipe(catchError((err, caught) => {
                    this.catchHttpError(err, caught);
                    return Observable.empty();
                }))
                .subscribe((custom) => {
                this._setItem(custom);
            });
        } else {
            this._setItem(item);
        }
    }

    catchHttpError(err, caught) {
        this.snackBar.open('Error on storage: ' + JSON.stringify(err.error),
            'Close', {
            duration: 15000,
        });
        return Observable.empty();
    }

    getItem() {
        return Observable.create((observer) => {
            // https://github.com/angular/angular/issues/11023
            let itemId = localStorage.getItem(this.storageProjectKey);
            if(itemId && (!this._item || this._item.id != parseInt(itemId))) {
                this.http.get(`${this.url}${itemId}/`)
                    .pipe(catchError((err, caught) => {
                        this.catchHttpError(err, caught);
                        return Observable.empty();
                    }))
                    .subscribe((project) => {
                    this.setItem(project);
                    observer.next(project);
                });
            } else if(!itemId) {
                observer.next(null);
            } else {
                observer.next(this._item);
            }
        });
    }
}


@Injectable({
    providedIn: 'root'
})
export class SelectProjectService extends StorageService {
    storageProjectKey: string = 'projectId';
    url: string = '/api/projects/projects/';

    constructor(
        route: ActivatedRoute,
        snackBar: MatSnackBar,
        public http: HttpClient,
    ) {
        super(route, snackBar, http);
    }

}
