import { Component, OnInit } from '@angular/core';


import { Terminal } from 'xterm';



function make_terminal(element, size, ws_url) {
    var ws = new WebSocket(ws_url);
    var term = new Terminal({
      cols: size.cols,
      rows: size.rows,
      // TODO:
      // screenKeys: true,
      // useStyle: true
    });
    ws.onopen = function(event) {
        ws.send(JSON.stringify(["set_size", size.rows, size.cols,
                                    window.innerHeight, window.innerWidth]));
        term.on('data', function(data) {
            ws.send(JSON.stringify(['stdin', data]));
        });

        term.on('title', function(title) {
            document.title = title;
        });

        term.open(element);

        ws.onmessage = function(event) {
            let json_msg = JSON.parse(event.data);
            switch(json_msg[0]) {
                case "stdout":
                    term.write(json_msg[1]);
                    break;
                case "disconnect":
                    term.write("\r\n\r\n[Finished... Terminado]\r\n");
                    break;
            }
        };
    };
    return {socket: ws, term: term};
}


function initTerminal(ws_url) {
    // Test size: 25x80
    let termRowHeight = 0.0 + 1.00*document.getElementById("dummy-screen").offsetHeight / 25;
    let termColWidth = 0.0 + (1.02*document.getElementById("dummy-screen-rows").offsetWidth / 80);
    document.getElementById("dummy-screen").setAttribute("style", "display: none");

    // let protocol = (window.location.protocol.indexOf("https") === 0) ? "wss" : "ws";
    // let ws_url = protocol+"://"+window.location.host+ "{{ws_url_path}}";

    function calculate_size(element) {
        let rows = Math.max(2, Math.floor(element.innerHeight/termRowHeight)-1);
        let cols = Math.max(3, Math.floor(element.innerWidth/termColWidth)-1);
        console.log("resize:", termRowHeight, termColWidth, element.innerHeight,
                                        element.innerWidth, rows, cols);
        return {rows: rows, cols: cols};
    }

    let size = calculate_size(window);
    let terminal = make_terminal(document.getElementById('console'), size, ws_url);

    window.onresize = function() {
      let geom = calculate_size(window);
      terminal.term.resize(geom.cols, geom.rows);
      terminal.socket.send(JSON.stringify(["set_size", geom.rows, geom.cols,
                                window.innerHeight, window.innerWidth]));
    };

}


@Component({
  selector: 'console',
  templateUrl: './console.component.html',
  styleUrls: ['./console.component.scss']
})
export class ConsoleComponent implements OnInit {

  constructor() { }

  ngOnInit() {
      initTerminal('ws://localhost:8700/_websocket/1');
  }

}
