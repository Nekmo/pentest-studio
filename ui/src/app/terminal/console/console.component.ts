import {Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges} from '@angular/core';


// import { Terminal } from 'xterm';
declare var Terminal: any;

function make_terminal(element, size, ws_url, auth, data) {
    var term = new Terminal({
        cols: size.cols,
        rows: size.rows,
        screenKeys: true,
        useStyle: true
    });
    let ws = null;

    if(!ws_url) {
        term.open(element);
        term.write(data);
    } else {
        ws = new WebSocket(ws_url);
        ws.onopen = function(event) {

            term.on('data', function(data) {
                ws.send(JSON.stringify(['stdin', data]));
            });

            term.on('title', function(title) {
                // TODO: set title
                document.title = title;
            });

            term.open(element);

            ws.onmessage = function(event) {
                let json_msg = JSON.parse(event.data);
                switch(json_msg[0]) {
                    case "authenticated":
                        // Terminal is now available
                        ws.send(JSON.stringify(["set_size", size.rows, size.cols,
                            window.innerHeight, window.innerWidth]));
                        break;
                    case "authentication-required":
                        ws.send(JSON.stringify(["authenticate", auth]));
                        break;
                    case "stdout":
                        term.write(json_msg[1]);
                        break;
                    case "disconnect":
                        term.write("\r\n\r\n[Finished... Terminado]\r\n");
                        break;
                }
            };
        };
        ws.onerror = function (event) {
            term.open(element);
            term.write(`[Pentest-studio ~]# Error on connection to terminal:\n\r${JSON.stringify(event)}`);
        }
    }

    return {socket: ws, term: term};
}


function initTerminal(ws_url, auth, data = null) {
    // Test size: 25x80
    let terminalElement = document.getElementById('console');
    // let contentSidenavElement = document.getElementsByTagName('mat-sidenav-content')[0];
    let contentSidenavElement = document.querySelector('mat-sidenav-content .mat-tab-body-wrapper');

    let termRowHeight = 0.0 + 1.00*document.getElementById("dummy-screen").offsetHeight / 25;
    let termColWidth = 0.0 + (1.02*document.getElementById("dummy-screen-rows").offsetWidth / 80);
    document.getElementById("dummy-screen").setAttribute("style", "display: none");

    // let protocol = (window.location.protocol.indexOf("https") === 0) ? "wss" : "ws";
    // let ws_url = protocol+"://"+window.location.host+ "{{ws_url_path}}";

    function calculate_size(element) {
        let width = element.offsetWidth;
        let height = element.offsetHeight;
        let rows = Math.max(2, Math.floor(height/termRowHeight)-1);
        let cols = Math.max(3, Math.floor(width/termColWidth)-1);
        console.log("resize:", termRowHeight, termColWidth, height,
            width, rows, cols);
        return {rows: rows, cols: cols};
    }

    // let size = {rows: 40, cols: 80};

    let size = calculate_size(contentSidenavElement);
    let terminal = make_terminal(terminalElement, size, ws_url, auth, data);

    window.onresize = function() {
        let geom = calculate_size(contentSidenavElement);
        terminal.term.resize(geom.cols, geom.rows);
        terminal.socket.send(JSON.stringify(["set_size", geom.rows, geom.cols,
            // window.innerHeight, window.innerWidth
            contentSidenavElement['offsetHeight'], contentSidenavElement['offsetWidth']
        ]));
    };
    return terminal;
}


@Component({
    selector: 'console',
    templateUrl: './console.component.html',
    styleUrls: ['./console.component.scss']
})
export class ConsoleComponent implements OnInit, OnChanges, OnDestroy {

    @Input() url;
    @Input() auth;
    @Input() data;
    terminal: any;

    constructor() { }

    ngOnChanges(changes: SimpleChanges): void {
        if(changes['url'] || changes['auth'] || changes['data']) {
            this.initTerminal();
        }
    }

    initTerminal() {
        setTimeout(() => {
            this.terminal = initTerminal(this.url, this.auth, this.data);
        }, 200);
    }

    ngOnInit() {
    }

    ngOnDestroy(): void {
        let ws = null;
        if(this.terminal) {
            ws = this.terminal.ws;
            this.terminal.term.destroy();
            console.log('Destroy!');
        }
        if(ws) {
            ws.close();
        }
    }

}
