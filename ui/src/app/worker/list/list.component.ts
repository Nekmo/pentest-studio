import {Component, OnDestroy, OnInit} from '@angular/core';
import {FlatTreeControl} from "@angular/cdk/tree";
import {MatTreeFlatDataSource, MatTreeFlattener} from "@angular/material/tree";
import {Action, ActionApi, Server, ServerApi} from "../../shared/api.service";
import {finalize} from "rxjs/operators";
import {WorkerMessageEvent, WorkerWebSocket} from "../../shared/ws.service";
import {FlatNode} from "../server-node/server-node.component";


// interface Server {
//     name: string;
//     children?: Server[];
// }

// const TREE_DATA: Server[] = [
//     {
//         name: 'Fruit',
//         children: [
//             {name: 'Apple'},
//             {name: 'Banana'},
//             {name: 'Fruit loops'},
//         ]
//     }, {
//         name: 'Vegetables',
//         children: [
//             {
//                 name: 'Green',
//                 children: [
//                     {name: 'Broccoli'},
//                     {name: 'Brussels sprouts'},
//                 ]
//             }, {
//                 name: 'Orange',
//                 children: [
//                     {name: 'Pumpkins'},
//                     {name: 'Carrots'},
//                 ]
//             },
//         ]
//     },
// ];


@Component({
    selector: 'app-list',
    templateUrl: './list.component.html',
    styleUrls: ['./list.component.scss']
})
export class ListComponent implements OnInit, OnDestroy {

    private _transformer = (node: Server, level: number) => {
        return {
            // expandable: !!node.children && node.children.length > 0,
            expandable: true,
            server: node,
            level: level,
        };
    }
    treeControl = new FlatTreeControl<FlatNode>(
        node => node.level, node => node.expandable);
    treeFlattener = new MatTreeFlattener(
        this._transformer, node => node.level, node => node.expandable,
        (node: Server): any => []
        // (node: Server): any => Object.values(this.terminalMetrics[node.id] || {}).values()
    );
    dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);
    hasChild = (_: number, node: FlatNode) => node.expandable;
    workerMetrics: {[metricName: string]: any} = {};
    terminalMetrics: {[workerId: string]: {[actionId: string]: {[metricName: string]: any}}} = {};

    constructor(private serverApi: ServerApi,
                private actionApi: ActionApi,
                private workerWebSocket: WorkerWebSocket) {
    }

    ngOnInit(): void {
        const data: Server[] = [];
        this.dataSource.data = [];

        this.serverApi.all()
            .pipe(finalize(() => {
                this.dataSource.data = data;
            }))
            .subscribe((el) => {
                console.log(el);
                data.push(el);
            });
        this.workerWebSocket.start()
        this.workerWebSocket.metricSubscribe('worker_machine', (event: WorkerMessageEvent) => {
            this.workerMetrics[event.worker_id] = event;
        });
        this.workerWebSocket.metricSubscribe('worker_machine', (event: WorkerMessageEvent) => {
            this.workerMetrics[event.worker_id] = event;
        });
        this.workerWebSocket.metricSubscribe('terminal', (event: WorkerMessageEvent) => {
            let metrics = this.terminalMetrics[event.worker_id];
            if (metrics === undefined) {
                metrics = {};
                this.terminalMetrics[event.worker_id] = metrics;
            }
            metrics[event.message.terminal_name] = event.message;
        });
    }

    setActions() {
        this.actionApi.filter({status: 'RUNNING'}).all()
            .pipe(finalize(() => {

            }))
            .subscribe(() => {

            })
    }

    ngOnDestroy() {
        this.workerWebSocket.close();
    }

}
