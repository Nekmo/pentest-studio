import { Injectable } from '@angular/core';


const RETRY_TIMEOUT = 10 * 1000;


export interface WorkerMessageEvent {
    worker_id: number;
    message: any;
}
export type WorkerMessageListener = (event: WorkerMessageEvent) => void;

function sendEvent(listeners: WorkerMessageListener[], event: WorkerMessageEvent) {
    listeners.forEach((listener: WorkerMessageListener) => {
        listener(event);
    });
}


@Injectable({
    providedIn: 'root'
})
export class WorkerWebSocket {
    ws: WebSocket;
    metrics: {[metricName: string]: WorkerMessageListener[]} = {};

    constructor() {
    }

    start() {
        this.createWebsocket();
    }

    createWebsocket() {
        this.ws = new WebSocket(`ws://${window.location.host}/ws/workers/`);
        this.ws.addEventListener('message', (event: MessageEvent<WorkerMessageEvent>) => {
            const data = JSON.parse(event.data as unknown as string);
            if (data.message.metric_name && this.metrics[data.message.metric_name] !== undefined) {
                sendEvent(this.metrics[data.message.metric_name], data);
            }
        });
        this.ws.onerror = (() => {
            setTimeout(() => {
                this.createWebsocket();
            }, RETRY_TIMEOUT);
        });
    }

    metricSubscribe(metricName: string, fn: WorkerMessageListener) {
        if (this.metrics[metricName] === undefined) {
            this.metrics[metricName] = [];
        }
        this.metrics[metricName].push(fn);
    }

    close(): void {
        this.metrics = {};
        this.ws.close();
    }
}
