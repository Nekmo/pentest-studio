import {ApiService, Field, SerializerService, Page} from "angular-django";
import {Injectable, Injector} from "@angular/core";
import {Observable} from "rxjs";
import {Dictionary} from "../../../../../angular-django/src/angular/projects/angular-django/src/lib/utility-types";

///////////////////////////////////////
// User API
///////////////////////////////////////

export class User extends SerializerService {
     @Field() pk: number;
     @Field() username: string;

     getName(): string {
         return this.username;
     }
}

@Injectable({
  providedIn: 'root'
})
export class UserApi extends ApiService {

    url = '/api/users/users/';
    serializer = User;
    contentType = 'auth_user';

  constructor(injector: Injector) {
    super(injector);
  }
}


///////////////////////////////////////
// Worker API
///////////////////////////////////////
export class Worker extends SerializerService {
     @Field() id: number;
     @Field() name: string;
     @Field() url: string;
     @Field() country: string;
     @Field() ip: string;
     @Field() pk: number;

     getName(): string {
         return this.name;
     }
}

@Injectable({
  providedIn: 'root'
})
export class WorkerApi extends ApiService {

    url = '/api/workers/workers/';
    serializer = Worker;
    contentType = 'pentest_worker_worker';

  constructor(injector: Injector) {
    super(injector);
  }
}


///////////////////////////////////////
// Action API
///////////////////////////////////////
export class Action extends SerializerService {
     @Field() project: Project;
     @Field() name: string;
     @Field() parent: any;
     @Field() is_last: boolean;
     @Field() plugin: string;
     @Field() shortcut_id: string;
     @Field() command: string;
     @Field() status: string;
     @Field() task_id: string;
     @Field() worker: Worker;
     @Field() completed_at: Date;
     @Field() is_read: boolean;
     @Field() read_by: any;
     @Field() created_at: Date;
     @Field() updated_at: Date;
     @Field() id: number;
     @Field() pk: number;

     getName(): string {
         return this.name;
     }

     terminalOutput(): Observable<any> {
        return (this._api as ActionApi).terminalOutput(this.pk);
     }
}

@Injectable({
  providedIn: 'root'
})
export class ActionApi extends ApiService {

    url = '/api/projects/actions/';
    serializer = Action;
    contentType = 'projects_action';

  constructor(injector: Injector) {
      super(injector);
  }

  grouped(): Observable<Page<any>> {
    return this.pipeHttp(this.http.get(`${this.getUrlList()}grouped/`,
        {params: this.queryParams}), true) as Observable<Page<any>>;
  }

  terminalOutput(pk: number): Observable<string> {
      return this.http.get(`${this.getUrlDetail(pk)}terminal_output/`, {responseType: 'text'});
  }
}


///////////////////////////////////////
// Project API
///////////////////////////////////////
export class Project extends SerializerService {
     @Field() name: string;
     @Field() type: string;
     @Field() parent: string;
     @Field() url: string;
     @Field() created_by: string;
     @Field() updated_by: string;
     @Field() created_at: Date;
     @Field() updated_at: Date;
     @Field() id: number;
     @Field() pk: number;

     getName(): string {
         return this.name;
     }
}

@Injectable({
  providedIn: 'root'
})
export class ProjectApi extends ApiService {

    url = '/api/projects/projects/';
    serializer = Project;
    contentType = 'projects_project';

  constructor(injector: Injector) {
    super(injector);
  }
}


///////////////////////////////////////
// Plugin Shortcut API
///////////////////////////////////////
export interface Arg {
    id: string;
    type: string;
}

export interface Env {
    key: string;
    value: string;
}

export class PluginShortcut extends SerializerService {
     @Field() id: string;
     @Field() plugin_id: string;
     @Field() shortcut_id: string;
     @Field() name: string;
     @Field() command: string;
     @Field() help: string;
     @Field() args: Arg[];
     @Field() envs: Env[];

     getName(): string {
         return this.name;
     }
}

@Injectable({
  providedIn: 'root'
})
export class PluginShortcutApi extends ApiService {

    url = '/api/projects/plugin_shortcuts/';
    serializer = PluginShortcut;

  constructor(injector: Injector) {
      super(injector);
  }

}


///////////////////////////////////////
// Plugin API
///////////////////////////////////////
export interface Setup {
    test: string;
    install: string;
}

export class Plugin extends SerializerService {
     @Field() id: string;
     @Field() name: string;
     @Field() description: string;
     @Field() setup: Setup;
     @Field({many: true}) shortcuts: PluginShortcut[];

     getName(): string {
         return this.name;
     }

     get fileId(): string {
         return `${this.id}.plugin`;
     }
}

@Injectable({
  providedIn: 'root'
})
export class PluginApi extends ApiService {

    url = '/api/projects/plugins/';
    serializer = Plugin;

  constructor(injector: Injector) {
      super(injector);
  }

  getText(pk: string) {
      const url = this.getUrlDetail(pk);
      return this.http.get(`${url}text/`, {responseType: "text"});
  }

}


///////////////////////////////////////
// Plugin Collection API
///////////////////////////////////////

export class PluginCollection extends SerializerService {
     @Field() pk: string;
     @Field() id: string;
     @Field() url: string;
     @Field() name: string;
     @Field() type: string;
     @Field() start: string;

     getName(): string {
         return this.name;
     }

     get fileId(): string {
         return `${this.id}.collection`;
     }
}

@Injectable({
  providedIn: 'root'
})
export class PluginCollectionApi extends ApiService {

    url = '/api/projects/plugin_collections/';
    serializer = PluginCollection;

  constructor(injector: Injector) {
      super(injector);
  }

  getText(pk: string) {
      const url = this.getUrlDetail(pk);
      return this.http.get(`${url}text/`, {responseType: "text"});
  }

  update(pk: number | string, data: Dictionary<any>): Observable<any> {
      const options = this.defaultHttpOptions();
      options['headers']['Content-Type'] = 'application/toml';
      return this.pipeHttp(this.http.patch(this.getUrlDetail(pk), data, options));
  }

}
