import {Component, EventEmitter, Input, OnChanges, OnDestroy, OnInit, SimpleChanges, ViewChild} from '@angular/core';
import {Subject} from "rxjs";
import {debounceTime, takeUntil} from "rxjs/operators";
import {Router} from "@angular/router";
import {MatTabGroup} from "@angular/material/tabs";
import {PluginItemsComponent} from "../plugin-items/plugin-items.component";


const TABS: {[tabName: string]: number} = {'plugin': 0, 'pluginCollection': 1};

@Component({
  selector: 'plugin-panel',
  templateUrl: './plugin-panel.component.html',
  styleUrls: ['./plugin-panel.component.scss']
})
export class PluginPanelComponent implements OnInit, OnDestroy, OnChanges {

    url = '/api/projects/plugins/';
    search: string = '';
    debouncedSearch: string = '';
    debouncedUpdateResults = new Subject();
    debounceTimeUpdateResults: number = 200;
    destroy$ = new EventEmitter();
    @Input() type: 'plugin'|'pluginCollection' = 'plugin';
    index: number = 0;

    @ViewChild('pluginItems') pluginItems: PluginItemsComponent;
    @ViewChild('pluginCollectionItems') pluginCollectionItems: PluginItemsComponent;

    constructor(private router: Router) { }

    ngOnInit() {
        this.debouncedUpdateResults.pipe(
          debounceTime(this.debounceTimeUpdateResults),
          takeUntil(this.destroy$),
        ).subscribe(() => {
          this.debouncedSearch = this.search;
        });
    }

    ngOnChanges(changes: SimpleChanges) {
        if (changes.type) {
            this.updateTab();
        }
    }

    reloadItems(): void {
        if (this.type == 'plugin') {
            this.pluginItems.iteratePlugins()
        }
    }

    updateTab(): void {
        const newIndex = TABS[this.type];
        if (newIndex !== this.index) {
            this.index = newIndex;
        }
    }

    ngOnDestroy(): void {
        this.destroy$.emit();
        this.destroy$.complete();
    }

    onChangeTab(tabIndex: number) {
        this.type = (tabIndex == 0 ? 'plugin' : 'pluginCollection');
    }

    createFile(): void {
        this.router.navigate(['/plugins', (this.type == 'plugin' ? 'create-plugin' : 'create-collection')]);
    }

}
