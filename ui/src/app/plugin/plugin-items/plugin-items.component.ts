import {AfterViewInit, Component, Input, NgZone, OnChanges, OnInit, SimpleChanges, ViewChild} from '@angular/core';
import {HttpClient} from "@angular/common/http";
import {CdkVirtualScrollViewport} from "@angular/cdk/scrolling";
import {filter, map, pairwise, throttleTime} from "rxjs/operators";
import {
    Action,
    ActionApi,
    Plugin,
    PluginApi, PluginCollection,
    PluginCollectionApi,
} from "../../shared/api.service";
import {Observable, Subscriber} from "rxjs";
import {Page} from "angular-django";


@Component({
    selector: 'plugin-items',
    templateUrl: './plugin-items.component.html',
    styleUrls: ['./plugin-items.component.scss']
})
export class PluginItemsComponent implements OnInit, OnChanges, AfterViewInit {

    @Input() search: string = '';
    @Input() type: 'plugin'|'pluginCollection' = 'plugin';
    @ViewChild('scroller') scroller: CdkVirtualScrollViewport;

    items: (Plugin|PluginCollection)[] = [];
    page: number = 0;
    pluginShortcutPage: number = 0;
    hasNextPage: boolean = true;

    constructor(private http: HttpClient,
                private ngZone: NgZone,
                private pluginApi: PluginApi,
                private pluginCollectionApi: PluginCollectionApi) { }

    ngOnInit() {
    }

    ngAfterViewInit() {
        // https://zoaibkhan.com/blog/create-a-fast-infinite-scrolling-list-in-angular/
        this.scroller.elementScrolled().pipe(
            map(() => this.scroller.measureScrollOffset('bottom')),
            pairwise(),
            filter(([y1, y2]) => (y2 < y1 && y2 < 140)),
            throttleTime(200)
        ).subscribe(() => {
            this.ngZone.run(() => {
                this.iterateNext();
            });
        });
    }

    ngOnChanges(changes: SimpleChanges): void {
        this.reset();
        this.iterateNext();
    }

    getQuerySet() {
        if (this.type === 'plugin') {
            return this.pluginApi;
        } else if(this.type === 'pluginCollection') {
            return this.pluginCollectionApi;
        } else {
            throw Error(`Invalid type: ${this.type}`);
        }
    }

    iteratePlugins(): Observable<boolean> {
        return new Observable((subscriber) => {
            const filters: {[key: string]: string} = {};
            this.page += 1;
            const actions: ActionApi = this.getQuerySet()
                .search(this.search)
                .page(this.page)
                .filter(filters);

            let observable: Observable<Page<Plugin|PluginCollection>>;
            observable = actions.list();
            observable.subscribe((page: Page<Plugin|PluginCollection>) => {
                this.hasNextPage = page.hasNextPage;
                this.items = this.items.concat(page as unknown as Array<Plugin|PluginCollection>);
                subscriber.next(true);
                subscriber.complete();
            });
        });
    }

    iterateNext() {
        this.iteratePlugins().subscribe();
    }

    reloadItems() {
        const currentPage = this.page;
        this.reset();
        for (let i = 0; i <= currentPage; i++) {
            this.iterateNext();
        }
    }

    reset() {
        this.items = [];
        this.page = 0;
        this.hasNextPage = true;
    }
}
