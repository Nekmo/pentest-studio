import {AfterViewInit, Component, Input, NgZone, OnChanges, OnInit, SimpleChanges, ViewChild} from '@angular/core';
import {HttpClient} from "@angular/common/http";
import {CdkVirtualScrollViewport} from "@angular/cdk/scrolling";
import {filter, map, pairwise, throttleTime} from "rxjs/operators";
import {Action, ActionApi, PluginShortcut, PluginShortcutApi} from "../../shared/api.service";
import {Observable} from "rxjs";
import {Page} from "angular-django";


function noCaseFilter(items, search) {
    if(!search || !items) {
        return items;
    }
    search = search.toLowerCase();
    return items.filter((x) => x.name.toLowerCase().indexOf(search) >= 0)
}


@Component({
    selector: 'action-items',
    templateUrl: './action-items.component.html',
    styleUrls: ['./action-items.component.scss']
})
export class ActionItemsComponent implements OnInit, OnChanges, AfterViewInit {

    @Input() projectId;
    @Input() actions;
    @Input() displayShortcuts: boolean = true;
    @Input() statuses: string[] = [];
    @Input() search: string = '';
    @ViewChild('scroller') scroller: CdkVirtualScrollViewport;

    shortcuts: any[];
    _actions = [];
    _shortcuts = [];

    actionItems: Action[] = [];
    pluginShortcutItems: PluginShortcut[] = [];
    actionPage: number = 0;
    pluginShortcutPage: number = 0;
    hasActionNextPage: boolean = true;
    hasPluginShortcutNextPage: boolean = true;

    pluginShortcutUrl: string = '/api/projects/plugin_shortcuts/';

    constructor(private http: HttpClient,
                private ngZone: NgZone,
                private actionApi: ActionApi,
                private pluginShortcutApi: PluginShortcutApi) { }

    ngOnInit() {
        if(this.displayShortcuts) {
            this.setShortcuts();
        }
        this.setFilters();
        this.iterateNext();
    }

    ngAfterViewInit() {
        // https://zoaibkhan.com/blog/create-a-fast-infinite-scrolling-list-in-angular/
        this.scroller.elementScrolled().pipe(
          map(() => this.scroller.measureScrollOffset('bottom')),
          pairwise(),
          filter(([y1, y2]) => (y2 < y1 && y2 < 140)),
          throttleTime(200)
        ).subscribe(() => {
            this.ngZone.run(() => {
                this.iterateNext();
            });
        });
    }

    ngOnChanges(changes: SimpleChanges): void {
        this.setFilters();
    }

    getFilteredActions(actions, filterStatuses = true) {
        if(this.statuses.length && filterStatuses) {
            actions = actions.filter((x) => this.statuses.indexOf(x.status) >= 0);
        }
        actions = noCaseFilter(actions, this.search);
        return actions;
    }

    setShortcuts() {
        this.http.get(this.pluginShortcutUrl).subscribe((data: any) => {
            this.shortcuts = data;
            this.setFilters();
        });
    }

    setFilters() {
        this._actions = this.getFilteredActions(this.actions);
        this._shortcuts = this.getFilteredActions(this.shortcuts, false);
    }

    iterateActions() {
        this.actionPage += 1;
        this.actionApi.page(this.actionPage).list().subscribe((page: Page<Action>) => {
            this.hasActionNextPage = page.hasNextPage;
            this.actionItems = this.actionItems.concat(page);
        });
    }

    iteratePluginShortcuts() {
        this.pluginShortcutPage += 1;
        this.pluginShortcutApi.page(this.pluginShortcutPage).list().subscribe((page: Page<PluginShortcut>) => {
            this.hasPluginShortcutNextPage = page.hasNextPage;
            this.pluginShortcutItems = this.pluginShortcutItems.concat(page);
        });
    }

    iterateNext() {
        if (this.hasActionNextPage) {
            this.iterateActions();
        } else if (this.hasPluginShortcutNextPage) {
            this.iteratePluginShortcuts();
        }
    }
}
