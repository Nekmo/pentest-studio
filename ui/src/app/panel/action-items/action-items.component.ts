import {AfterViewInit, Component, Input, NgZone, OnChanges, OnInit, SimpleChanges, ViewChild} from '@angular/core';
import {HttpClient} from "@angular/common/http";
import {CdkVirtualScrollViewport} from "@angular/cdk/scrolling";
import {filter, map, pairwise, throttleTime} from "rxjs/operators";
import {Action, ActionApi, PluginShortcut, PluginShortcutApi} from "../../shared/api.service";
import {Observable} from "rxjs";
import {Page} from "angular-django";
import { Pipe, PipeTransform } from '@angular/core';


function noCaseFilter(items, search) {
    if(!search || !items) {
        return items;
    }
    search = search.toLowerCase();
    return items.filter((x) => x.name.toLowerCase().indexOf(search) >= 0)
}


@Pipe({name: 'actionRoute'})
export class ActionRoutePipe implements PipeTransform {
  transform(actionId: number, projectId: number|null = null): string {
      if (projectId) {
          return `/projects/${projectId}/actions/${actionId}`;
      } else {
          return `/actions/${actionId}`;
      }
  }
}


@Component({
    selector: 'action-items',
    templateUrl: './action-items.component.html',
    styleUrls: ['./action-items.component.scss']
})
export class ActionItemsComponent implements OnInit, OnChanges, AfterViewInit {

    @Input() projectId;
    @Input() actionId;
    @Input() actionIdsFilter;
    @Input() displayActions: boolean = true;
    @Input() displayShortcuts: boolean = true;
    @Input() statuses: string[] = [];
    @Input() search: string = '';
    @ViewChild('scroller') scroller: CdkVirtualScrollViewport;

    actionItems: Action[] = [];
    pluginShortcutItems: PluginShortcut[] = [];
    actionPage: number = 0;
    pluginShortcutPage: number = 0;
    hasActionNextPage: boolean = true;
    hasPluginShortcutNextPage: boolean = true;

    constructor(private http: HttpClient,
                private ngZone: NgZone,
                private actionApi: ActionApi,
                private pluginShortcutApi: PluginShortcutApi) { }

    ngOnInit() {
    }

    ngAfterViewInit() {
        // https://zoaibkhan.com/blog/create-a-fast-infinite-scrolling-list-in-angular/
        this.scroller.elementScrolled().pipe(
          map(() => this.scroller.measureScrollOffset('bottom')),
          pairwise(),
          filter(([y1, y2]) => (y2 < y1 && y2 < 140)),
          throttleTime(200)
        ).subscribe(() => {
            this.ngZone.run(() => {
                this.iterateNext();
            });
        });
    }

    ngOnChanges(changes: SimpleChanges): void {
        this.reset();
        this.iterateNext();
    }

    iterateActions() {
        const filters: {[key: string]: string} = {};
        filters['project'] = this.projectId;
        if (this.statuses.length) {
            filters['status__in'] = this.statuses.join(',');
        }
        this.actionPage += 1;
        let actions: ActionApi = this.actionApi.search(this.search)
            .search(this.search)
            .page(this.actionPage)
            .filter(filters);
        if (this.actionIdsFilter) {
            actions = (actions.filter({'id__in': this.actionIdsFilter.join(',')}) as ActionApi);
        }

        let observable: Observable<Page<Action>>|null = null;
        if (this.actionId) {
            this.actionApi.get(this.actionId).subscribe((action: Action) => {
                actions = actions.filter({'plugin': action.plugin}) as ActionApi;
                observable = actions.list();
                (observable as Observable<Page<Action>>).subscribe((page: Page<Action>) => {
                    this.hasActionNextPage = page.hasNextPage;
                    this.actionItems = this.actionItems.concat(page);
                });
            });
        }
        if (this.actionIdsFilter) {
            observable = actions.list();
        }
        if (!this.actionIdsFilter && !this.actionId) {
            observable = actions.grouped();
        }
        if (observable) {
            observable.subscribe((page: Page<Action>) => {
                this.hasActionNextPage = page.hasNextPage;
                this.actionItems = this.actionItems.concat(page);
            });
        } else {
            throw Error(`Observable is undefined`);
        }
    }

    iteratePluginShortcuts() {
        this.pluginShortcutPage += 1;
        this.pluginShortcutApi.page(this.pluginShortcutPage).list().subscribe((page: Page<PluginShortcut>) => {
            this.hasPluginShortcutNextPage = page.hasNextPage;
            this.pluginShortcutItems = this.pluginShortcutItems.concat(page);
        });
    }

    iterateNext() {
        if (this.hasActionNextPage && this.displayActions) {
            this.iterateActions();
        } else if (this.hasPluginShortcutNextPage && this.displayShortcuts) {
            this.iteratePluginShortcuts();
        }
    }

    reset() {
        this.actionItems = [];
        this.pluginShortcutItems = [];
        this.actionPage = 0;
        this.pluginShortcutPage = 0;
        this.hasActionNextPage = true;
        this.hasPluginShortcutNextPage = true;
    }
}
