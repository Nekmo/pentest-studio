import {Component, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges} from '@angular/core';
import {Router} from "@angular/router";
import {HttpClient} from "@angular/common/http";
import {Subject} from "rxjs";
import {debounceTime, takeUntil} from "rxjs/operators";
import {EventEmitter} from '@angular/core';


@Component({
    selector: 'action-panel',
    templateUrl: './action-panel.component.html',
    styleUrls: ['./action-panel.component.scss']
})
export class ActionPanelComponent implements OnInit, OnChanges, OnDestroy {

    @Input() projectId: number;
    @Input() actionId: number;
    @Input() actionIdsFilter: number[]|undefined;
    @Output() removedActionId = new EventEmitter<void>();
    @Output() removedActionIdsFilter = new EventEmitter<void>();

    url = '/api/projects/projects/';
    project: any;
    search: string = '';
    debouncedSearch: string = '';
    debouncedUpdateResults = new Subject();
    debounceTimeUpdateResults: number = 200;
    mode: 'actionId'|'actionIdsFilter'|'' = '';
    destroy$ = new EventEmitter();

    constructor(private router: Router,
                private http: HttpClient,
                ) {
    }

    ngOnInit() {
        this.debouncedUpdateResults.pipe(
          debounceTime(this.debounceTimeUpdateResults),
          takeUntil(this.destroy$),
        ).subscribe(() => {
          this.debouncedSearch = this.search;
        });
        this.removedActionId.pipe(
            takeUntil(this.destroy$)
        ).subscribe(() => {
            this.setMode();
        });
        this.removedActionIdsFilter.pipe(
            takeUntil(this.destroy$)
        ).subscribe(() => {
            this.actionIdsFilter = undefined;
            this.setMode();
        });
    }

    setMode() {
        let mode: 'actionId'|'actionIdsFilter'|'' = '';
        if (this.actionIdsFilter) {
            mode = 'actionIdsFilter';
        } else if (this.actionId) {
            mode = 'actionId';
        }
        this.mode = mode;
    }

    ngOnChanges(changes: SimpleChanges): void {
        if(changes['projectId']) {
            this.setActions();
        }
        this.setMode();
    }

    setActions() {
        this.http.get(`${this.url}${this.projectId}`).subscribe((data) => this.project = data);
    }

    customCommandClick() {
        this.router.navigateByUrl(`/projects/${this.projectId}/actions/create`);
    }

    ngOnDestroy(): void {
        this.destroy$.emit();
        this.destroy$.complete();
    }
}
