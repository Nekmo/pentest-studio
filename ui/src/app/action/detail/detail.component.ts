import {ChangeDetectorRef, Component, OnInit, ViewChild} from '@angular/core';
import {HttpClient} from "@angular/common/http";
import {ActivatedRoute, NavigationEnd, Router} from "@angular/router";
import {MediaMatcher} from "@angular/cdk/layout";
import {SelectProjectService} from "../../storage.service";
import {ConsoleComponent} from "../../terminal/console/console.component";


export function doResize(wrapper, el) {

    let scale;
    let elHeight = el.offsetHeight;
    let elWidth = el.offsetWidth;


    scale = Math.min(
        wrapper.offsetWidth / elWidth,
        wrapper.offsetHeight / elHeight
    );

    el.style.transform = "translate(-50%, -50%) " + "scale(" + scale + ")";
}

@Component({
    selector: 'app-detail',
    templateUrl: './detail.component.html',
    styleUrls: ['./detail.component.scss']
})
export class DetailComponent implements OnInit {

    projectId: number;
    instanceId: number;
    project: any;
    action: any;
    projectUrl = '/api/projects/projects/';
    url = '/api/projects/actions/';
    terminal_output: string = null;

    mobileQuery: MediaQueryList;
    private _mobileQueryListener: () => void;

    @ViewChild(ConsoleComponent) terminal: ConsoleComponent;

    constructor(
        private http: HttpClient,
        private route: ActivatedRoute,
        private router: Router,
        private selectProject: SelectProjectService,
        changeDetectorRef: ChangeDetectorRef,
        media: MediaMatcher
    ) {
        this.mobileQuery = media.matchMedia('(max-width: 600px)');
        this._mobileQueryListener = () => changeDetectorRef.detectChanges();
        this.mobileQuery.addListener(this._mobileQueryListener);

        this.router.routeReuseStrategy.shouldReuseRoute = () => false;
    }

    ngOnInit() {
        this.projectId = +this.route.snapshot.paramMap.get('projectId');
        // this.setProject(this.projectId);
        this.selectProject.setItem(this.projectId);
        this.selectProject.getItem().subscribe((project) => {
              this.project = project;
              console.log(project);
        });

        this.setInstance();
    }

    setInstance() {
        this.instanceId = +this.route.snapshot.paramMap.get('actionId');
        this.setAction(this.instanceId);
    }

    setProject(id) {
        this.http.get(`${this.projectUrl}${id}`).subscribe((data) => this.project = data);
    }

    setAction(id) {
        this.http.get(`${this.url}${id}`).subscribe((data) => this.action = data);
    }

    getActionUrl() {
        return `${this.url}${this.instanceId}/`;
    }

    getTab(currentTab) {
        if(currentTab == 1) {
            setTimeout(() => {
                let wrapper = document.querySelector('mat-sidenav-content .mat-tab-body-wrapper');
                let el = document.getElementById('asciinema');
                el.innerHTML = '<asciinema-player' +
                    ` src="${this.getActionUrl()}asciinema.cast"></asciinema-player>`;
                setTimeout(() => {doResize(wrapper, el)}, 100);
                el.querySelector('asciinema-player').addEventListener('play', function(e) {
                    setTimeout(() => {doResize(wrapper, el)}, 50);
                });
            }, 100);
        } else if(currentTab == 2 && this.terminal_output === null) {
            this.http.get(`${this.getActionUrl()}terminal_output`, {responseType: 'text'})
                .subscribe((data: string) => {
                    setTimeout(() => this.terminal_output = data, 500);
                });
        }
    }

}
