import {ChangeDetectorRef, Component, OnDestroy, OnInit, ViewChild} from '@angular/core';
import {HttpClient} from "@angular/common/http";
import {ActivatedRoute, NavigationEnd, Router} from "@angular/router";
import {MediaMatcher} from "@angular/cdk/layout";
import {SelectProjectService} from "../../storage.service";
import {ConsoleComponent} from "../../terminal/console/console.component";
import {Action, ActionApi, Project} from "../../shared/api.service";
import {DialogService} from "../../shared/dialog.service";
import {WorkerMessageEvent, WorkerWebSocket} from "../../shared/ws.service";


export function doResize(wrapper, el) {

    let scale;
    let elHeight = el.offsetHeight;
    let elWidth = el.offsetWidth;


    scale = Math.min(
        wrapper.offsetWidth / elWidth,
        wrapper.offsetHeight / elHeight
    );

    el.style.transform = "translate(-50%, -50%) " + "scale(" + scale + ")";
}

@Component({
    selector: 'app-detail',
    templateUrl: './detail.component.html',
    styleUrls: ['./detail.component.scss']
})
export class DetailComponent implements OnInit, OnDestroy {

    projectId: number;
    instanceId: number;
    project: Project;
    action: Action;
    historyMode: boolean = false;
    projectUrl = '/api/projects/projects/';
    url = '/api/projects/actions/';
    terminal_output: string|null = null;
    current: number = 0;
    mode: string = 'detail';
    memoryPercent: number|null = null;
    cpuPercent: number|null = null;

    mobileQuery: MediaQueryList;
    private _mobileQueryListener: () => void;

    @ViewChild(ConsoleComponent) terminal: ConsoleComponent;

    constructor(
        private http: HttpClient,
        private route: ActivatedRoute,
        private router: Router,
        private selectProject: SelectProjectService,
        private actionApi: ActionApi,
        private dialogService: DialogService,
        private workerWebSocket: WorkerWebSocket,
        changeDetectorRef: ChangeDetectorRef,
        media: MediaMatcher) {
        this.mobileQuery = media.matchMedia('(max-width: 600px)');
        this._mobileQueryListener = () => changeDetectorRef.detectChanges();
        this.mobileQuery.addListener(this._mobileQueryListener);
    }

    ngOnInit() {
        this.workerWebSocket.start();
        this.route.params.subscribe(params => {
            const projectId: number = +(this.route.snapshot.paramMap.get('projectId') as string);
            const instanceId: number = +(this.route.snapshot.paramMap.get('actionId') as string);
            if (projectId != this.projectId) {
                this.setProject(projectId);
            }
            if (instanceId != this.instanceId) {
                this.setAction(instanceId); // reset and set based on new parameter this time
                this.workerWebSocket.sendMessage({
                    'filter_subscription': { 'metric_name': 'terminal', 'terminal_name': `${this.instanceId}`}
                });
            }
        });
        this.workerWebSocket.metricSubscribe('terminal', (event: WorkerMessageEvent) => {
            this.memoryPercent = event.message.memory_percent;
            this.cpuPercent = event.message.cpu_percent;
        });
    }

    setProject(id: number) {
        this.projectId = id;
        this.selectProject.setItem(this.projectId);
        this.selectProject.getItem().subscribe((project: Project) => {
              this.project = project;
        });
    }

    setAction(id: number) {
        this.instanceId = id;
        this.reset();

        this.actionApi.retrieve(this.instanceId).subscribe((action: Action) => {
            this.action = action;
            if(this.action.status != 'RUNNING') {
                this.current = 2;
            } else {
                this.current = 0;
            }
            this.getTab(this.current);
            // TODO: improve using websockets
            if(this.action.status == 'PENDING') {
                setTimeout(() => this.setAction(id), 5000);
            }
        });
    }

    toggleHistoryMode() {
        this.historyMode = !this.historyMode;
    }

    getTab(currentTab) {
        if(currentTab == 1) {
            setTimeout(() => {
                let wrapper = document.querySelector('mat-sidenav-content .mat-tab-body-wrapper');
                let el = document.getElementById('asciinema')!;
                el.innerHTML = '<asciinema-player' +
                    ` src="${this.actionApi.getUrlDetail(this.instanceId)}asciinema.cast"></asciinema-player>`;
                setTimeout(() => {doResize(wrapper, el)}, 100);
                el.querySelector('asciinema-player')!.addEventListener('play', function(e) {
                    setTimeout(() => {doResize(wrapper, el)}, 50);
                });
            }, 100);
        } else if(currentTab == 2 && this.terminal_output === null) {
            this.action.terminalOutput().subscribe((data: string) => {
                this.terminal_output = data;
                    // setTimeout(() => this.terminal_output = data, 500);
            });
        }
    }

    setEditMode() {
        this.mode = 'edit';
    }

    deleteAction() {
        this.dialogService.confirmDialog({
          title: 'Confirm deletion',
          message: 'Are you sure you want to do delete this action?',
          confirmCaption: 'Yes',
          cancelCaption: 'No',
        }).subscribe((confirmed) => {
            if(confirmed) {
                this.action.delete().subscribe(() => {
                    this.router.navigate(['projects', this.projectId]);
                })
            }
        });
    }

    setDetailMode(update = false) {
        this.mode = 'detail';
        if(update) {
            this.setAction(this.instanceId);
        }
    }

    reset() {
        this.memoryPercent = null;
        this.terminal_output = null;
    }

    ngOnDestroy() {
        this.workerWebSocket.close();
    }

}
