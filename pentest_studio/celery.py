from __future__ import absolute_import, unicode_literals
import os
from threading import Thread

from celery import Celery
from pentest_worker.terminal import start_terminal_webserver

# set the default Django settings module for the 'celery' program.

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pentest_studio.settings')


class PentestCelery(Celery):
    def on_init(self):
        l = Thread(target=start_terminal_webserver().start)
        l.daemon = True
        l.start()


app = PentestCelery('pentest_studio')

# Using a string here means the worker doesn't have to serialize
# the configuration object to child processes.
# - namespace='CELERY' means all celery-related configuration keys
#   should have a `CELERY_` prefix.
app.config_from_object('django.conf:settings', namespace='CELERY')

# Load task modules from all registered Django app configs.
app.autodiscover_tasks()


@app.task(bind=True)
def debug_task(self):
    print('Request: {0!r}'.format(self.request))
