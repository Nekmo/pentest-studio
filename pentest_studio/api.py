from django.contrib.auth import get_user_model
from django_filters.rest_framework import DjangoFilterBackend
from rest_framework import filters
from rest_framework.viewsets import ModelViewSet

from pentest_studio.serializers import UserSerializer


class BaseSerializerMixin(object):

    # def get_notes(self, obj):
    #     return NoteSerializer(Note.objects.filter(content_object=obj), context=self.context, many=True).data

    def get_field_names(self, declared_fields, info):
        many = getattr(self.context.get('view'), 'action', None) == 'list'
        if many and getattr(self.Meta, 'list_fields', None):
            expanded_fields = self.Meta.list_fields
        else:
            expanded_fields = super(BaseSerializerMixin, self).get_field_names(declared_fields, info)
        if getattr(self.Meta, 'extra_fields', None):
            fields = expanded_fields + self.Meta.extra_fields
        else:
            fields = expanded_fields
        fields = list(fields)
        if 'id' not in fields:
            fields += ['id']
        if 'pk' not in fields:
            fields += ['pk']
        if many and getattr(self.Meta, 'exclude_list_fields', None):
            fields = [field for field in fields if field not in self.Meta.exclude_list_fields]
        return fields


class BaseViewSetMixIn(object):
    filter_backends = (filters.OrderingFilter, filters.SearchFilter, DjangoFilterBackend)
    ordering_fields = ()
    search_fields = ()
    filter_fields = ()
    detail_serializer_class = None

    def get_serializer_class(self):
        if self.action == 'list' or not self.detail_serializer_class:
            return self.serializer_class
        else:
            return self.detail_serializer_class


class UserViewSet(BaseViewSetMixIn, ModelViewSet):
    queryset = get_user_model().objects.all()
    serializer_class = UserSerializer
