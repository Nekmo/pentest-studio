import os.path
import shutil
from typing import Union, Type

from django.conf import settings
from drf_writable_nested import WritableNestedModelSerializer
from jinja2 import Template
from rest_framework import serializers
from rest_framework.fields import empty

from pentest_project.plugins import render_shortcut_command, PluginCollection, PluginShortcut, Plugin
from pentest_studio.api import BaseSerializerMixin
from pentest_worker.api.serializers import WorkerSerializer
from pentest_project.models import Project, Action


class ProjectSerializer(BaseSerializerMixin, serializers.HyperlinkedModelSerializer):

    class Meta:
        model = Project
        fields = ('name', 'type', 'parent', 'url', 'created_by', 'updated_by',
                  'created_at', 'updated_at')
        read_only_fields = ('created_by', 'updated_by', 'created_at', 'updated_at')


class ActionSerializer(BaseSerializerMixin, WritableNestedModelSerializer):
    project = ProjectSerializer()
    worker = WorkerSerializer(required=False)

    class Meta:
        model = Action
        fields = ('project', 'name', 'parent', 'is_last', 'plugin', 'shortcut_id', 'command',
                  'status', 'task_id', 'worker', 'completed_at', 'is_read', 'read_by',
                  'created_at', 'updated_at')


class DetailActionSerializer(ActionSerializer):
    terminal_url = serializers.SerializerMethodField()
    terminal_auth = serializers.SerializerMethodField()

    def get_terminal_url(self, instance: Action):
        return instance.get_terminal_url()

    def get_terminal_auth(self, instance: Action):
        # self.context['request']
        return instance.get_terminal_auth(self.context['request'])

    class Meta(ActionSerializer.Meta):
        fields = ActionSerializer.Meta.fields + ('terminal_url', 'terminal_auth')


class DetailProjectSerializer(ProjectSerializer):
    data = serializers.JSONField(required=False, default=dict)
    actions = ActionSerializer(many=True, required=False)

    class Meta(ProjectSerializer.Meta):
        fields = ProjectSerializer.Meta.fields + ('data', 'description', 'actions')


class PluginShortcutArgSerializer(serializers.Serializer):
    id = serializers.CharField()
    type = serializers.CharField()


class PluginShortcutEnvSerializer(serializers.Serializer):
    key = serializers.CharField()
    value = serializers.CharField()


class PluginShortcutSerializer(serializers.Serializer):
    id = serializers.CharField()
    url = serializers.HyperlinkedIdentityField(view_name='plugin-shortcut-detail')
    plugin_id = serializers.CharField(required=False)
    full_id = serializers.CharField(required=False)
    name = serializers.CharField()
    help = serializers.CharField(allow_blank=True)
    command = serializers.CharField()
    args = PluginShortcutArgSerializer(many=True)
    envs = PluginShortcutEnvSerializer(many=True)


class PluginSetupSerializer(serializers.Serializer):
    test = serializers.CharField()
    install = serializers.CharField()


class FileTomlSerializer(serializers.Serializer):
    def create(self, validated_data):
        raw_body = self.context['request'].raw_body
        filename = self.context['request'].filename
        model_cls: Union[Type[Plugin], Type[PluginCollection]] = self.Meta.model
        path = os.path.join(settings.PLUGIN_DIRECTORY, filename)
        instance = model_cls(path)
        instance.write(raw_body)
        if filename and filename != instance.pk:
            instance.rename(filename)
        return instance

    def update(self, instance: Union[Plugin, PluginCollection], validated_data):
        raw_body = self.context['request'].raw_body
        filename = self.context['request'].filename
        instance.write(raw_body)
        if filename and filename != instance.pk:
            instance.rename(filename)
        return instance

    class Meta:
        model = None


class PluginSerializer(FileTomlSerializer):
    id = serializers.CharField(required=False)
    url = serializers.HyperlinkedIdentityField(view_name='plugin-detail')
    name = serializers.CharField()
    description = serializers.CharField()
    setup = PluginSetupSerializer()
    shortcuts = PluginShortcutSerializer(many=True)

    # def get_id(self, obj):
    #     return obj['id'].split('.')[0]

    class Meta:
        model = Plugin


class RenderShortcutSerializer(serializers.Serializer):
    project_id = serializers.IntegerField()
    env = serializers.JSONField()

    def render(self, shortcut: PluginShortcut):
        return render_shortcut_command(
            shortcut.command,
            Project.objects.get(pk=self.validated_data['project_id']),
            self.validated_data['env'],
        )


class PluginCollectionSerializer(FileTomlSerializer):
    pk = serializers.CharField(required=False)
    id = serializers.CharField(required=False)
    url = serializers.HyperlinkedIdentityField(view_name='plugin-collection-detail')
    name = serializers.CharField()
    type = serializers.CharField()
    start = serializers.CharField()

    class Meta:
        model = PluginCollection
