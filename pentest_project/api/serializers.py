from drf_writable_nested import WritableNestedModelSerializer
from jinja2 import Template
from rest_framework import serializers

from pentest_studio.api import BaseSerializerMixin
from pentest_worker.api.serializers import WorkerSerializer
from pentest_project.models import Project, Action


class ProjectSerializer(BaseSerializerMixin, serializers.HyperlinkedModelSerializer):

    class Meta:
        model = Project
        fields = ('name', 'type', 'parent', 'url', 'created_by', 'updated_by',
                  'created_at', 'updated_at')


class ActionSerializer(BaseSerializerMixin, WritableNestedModelSerializer):
    project = ProjectSerializer()
    worker = WorkerSerializer(required=False)

    class Meta:
        model = Action
        fields = ('project', 'name', 'parent', 'is_last', 'plugin', 'shortcut_id', 'command',
                  'status', 'task_id', 'worker', 'completed_at', 'is_read', 'read_by',
                  'created_at', 'updated_at')


class DetailActionSerializer(ActionSerializer):
    terminal_url = serializers.SerializerMethodField()
    terminal_auth = serializers.SerializerMethodField()

    def get_terminal_url(self, instance: Action):
        return instance.get_terminal_url()

    def get_terminal_auth(self, instance: Action):
        # self.context['request']
        return instance.get_terminal_auth(self.context['request'])

    class Meta(ActionSerializer.Meta):
        fields = ActionSerializer.Meta.fields + ('terminal_url', 'terminal_auth')


class DetailProjectSerializer(ProjectSerializer):
    actions = ActionSerializer(many=True, required=False)

    class Meta(ProjectSerializer.Meta):
        fields = ProjectSerializer.Meta.fields + ('data', 'parent', 'description', 'actions')


class PluginShortcutArgSerializer(serializers.Serializer):
    id = serializers.CharField()
    type = serializers.CharField()


class PluginShortcutEnvSerializer(serializers.Serializer):
    key = serializers.CharField()
    value = serializers.CharField()


class PluginShortcutSerializer(serializers.Serializer):
    id = serializers.SerializerMethodField()
    plugin_id = serializers.SerializerMethodField()
    shortcut_id = serializers.SerializerMethodField()
    name = serializers.CharField()
    help = serializers.CharField()
    command = serializers.CharField()
    args = PluginShortcutArgSerializer(many=True)
    envs = PluginShortcutEnvSerializer(many=True)

    def get_id(self, obj):
        if '_id' in obj:
            return obj['_id']
        id_ = obj['id']
        return '.'.join([id_[0].split('.')[0], id_[1]])

    def get_plugin_id(self, obj):
        if 'plugin_id' in obj:
            return obj['plugin_id']
        return obj['id'][0].split('.')[0]

    def get_shortcut_id(self, obj):
        if 'shortcut_id' in obj:
            return obj['shortcut_id']
        return obj['id'][1]


class PluginSetupSerializer(serializers.Serializer):
    test = serializers.CharField()
    install = serializers.CharField()


class PluginSerializer(serializers.Serializer):
    id = serializers.SerializerMethodField()
    name = serializers.CharField()
    description = serializers.CharField()
    setup = PluginSetupSerializer()
    shortcuts = PluginShortcutSerializer(many=True)

    def get_id(self, obj):
        return obj['id'].split('.')[0]


class RenderShortcutSerializer(serializers.Serializer):
    project_id = serializers.IntegerField()
    env = serializers.JSONField()

    def render(self, shortcut):
        template = Template(shortcut['command'])
        project = Project.objects.get(pk=self.validated_data['project_id'])
        env = {'url': project.url}
        env.update(project.data or {})
        env.update(self.validated_data['env'])
        return template.render(**env)

    # def create(self, validated_data):
    #     GetPluginShortcut(validated_data['shortcut'])
        # plugin_file = GetPluginFile()
        # plugin_id, shortcut_id = validated_data['shortcut']
        # filename = plugin_file.search_filename(plugin_id)
        # data = plugin_file.get_file(filename)
        # serializer = PluginShortcutSerializer(instance=data)
        # serializer.is_valid()
        # filter(lambda x: x, serializer.validated_data)
