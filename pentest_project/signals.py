from asgiref.sync import async_to_sync
from django.db.models.signals import post_save
from django.dispatch import receiver
from channels.layers import get_channel_layer
from django.forms import model_to_dict

from pentest_project.models import Action, Project
from pentest_project.plugins import PluginCollections, render_shortcut_command
from pentest_project.tasks import run_action_terminal


TASK_COUNTDOWN = 3


@receiver(post_save, sender=Action)
def update_is_last_action_plugin(sender, instance: Action, created: bool, **kwargs):
    if not created or not instance.plugin:
        return
    Action.objects\
        .filter(plugin=instance.plugin, is_last=True)\
        .exclude(pk=instance.pk).update(is_last=False)


@receiver(post_save, sender=Action)
def action_update(sender, instance: Action, created: bool, **kwargs):
    async_to_sync(get_channel_layer().group_send)(
        'action_update',
        {
            'worker_id': instance.worker.pk,
            'type': 'chat_message',
            'message': {'update_model': Action.__name__, 'model_data': model_to_dict(instance)},
        }
    )


@receiver(post_save, sender=Project)
def create_actions_from_collections(sender, instance: Project, created: bool, **kwargs):
    if not created or not instance.type:
        return
    for plugin_shortcut in PluginCollections().plugin_shortcuts_by_type(instance.type):
        action: Action = Action.objects.create(
            name=plugin_shortcut.name,
            project=instance,
            plugin=plugin_shortcut.full_id,
            command=render_shortcut_command(plugin_shortcut.command, instance)
        )
        run_action_terminal.apply_async((action.pk,), countdown=TASK_COUNTDOWN)
