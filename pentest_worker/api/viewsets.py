from django.core.signing import BadSignature
from django_filters.rest_framework import DjangoFilterBackend
from rest_framework import viewsets, filters, status
from rest_framework.exceptions import bad_request, PermissionDenied
from rest_framework.response import Response

from pentest_studio.api import BaseViewSetMixIn
from pentest_worker.api.serializers import ServerSerializer
from pentest_worker.connections import get_client_ip
from pentest_worker.crypto import register_signer
from pentest_worker.models import Server


class ServerViewSet(BaseViewSetMixIn, viewsets.ModelViewSet):
    """
    """
    queryset = Server.objects.all()
    serializer_class = ServerSerializer
    filter_backends = (filters.OrderingFilter, filters.SearchFilter, DjangoFilterBackend)
    search_fields = ('name',)
    filter_fields = ('country', 'created_at', 'updated_at')
    ordering_fields = filter_fields

    def create(self, request, *args, **kwargs):
        register = request.META.get('HTTP_X_REGISTER', '')
        try:
            assert register_signer.unsing(register, get_client_ip(request), 20).get('command') == 'register'
        except (BadSignature, AssertionError) as e:
            raise PermissionDenied({"message": "Invalid register signature."})
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        self.perform_create(serializer)
        headers = self.get_success_headers(serializer.data)
        return Response({
            'key': serializer.instance.user_token
        }, status=status.HTTP_201_CREATED, headers=headers)
