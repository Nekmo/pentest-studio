import json

from channels.auth import login
from channels.db import database_sync_to_async
from channels.generic.websocket import AsyncWebsocketConsumer


class WorkerConsumer(AsyncWebsocketConsumer):
    groups = ["worker_metrics"]
    worker = None

    async def connect(self):
        user = self.scope['user']
        if not user.is_authenticated:
            return
        await login(self.scope, user)
        self.worker = await database_sync_to_async(lambda: user.worker)()
        # self.room_name = self.scope['url_route']['kwargs']['room_name']
        # self.room_group_name = 'chat_%s' % self.room_name
        #
        # # Join room group
        # await self.channel_layer.group_add(
        #     'worker_metrics',
        #     self.channel_name
        # )
        await self.accept()

    async def disconnect(self, close_code):
        # Leave room group
        # await self.channel_layer.group_discard(
        #     self.room_group_name,
        #     self.channel_name
        # )
        pass

    # Receive message from WebSocket
    async def receive(self, text_data=None, bytes_data=None):
        text_data_json = json.loads(text_data)

        # Send message to room group
        await self.channel_layer.group_send(
            'worker_metrics',
            {
                'type': 'chat_message',
                'message': text_data_json
            }
        )

    async def chat_message(self, event):
        message = event['message']

        # Send message to WebSocket
        # await self.send(text_data=json.dumps({
        #     'message': message
        # }))
