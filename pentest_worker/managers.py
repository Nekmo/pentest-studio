from random import randint

from django.core.cache import cache
from django.db import models
from django.db.models import Count
from django.db.models.signals import pre_save, post_save


TASK_COUNTDOWN = 3


class WorkerQuerySet(models.QuerySet):
    def random(self):
        if not self.exists():
            return
        count = self.aggregate(count=Count('id'))['count']
        random_index = randint(0, count - 1)
        return self.all()[random_index]

    def best(self):
        worker_colors: dict = cache.get_many(cache.keys("worker_color_status_*"))
        workers_sorted = [x[0] for x in sorted(worker_colors.items(), key=lambda x: x[1])]
        worker_key = next(iter(workers_sorted), None)
        if worker_key:
            return self.get(pk=worker_key.split('_')[-1])

    def active(self):
        keys = cache.keys("worker_color_status_*")
        return self.filter(pk__in=[key.split('_')[-1] for key in keys])

    def run_command(self, name: str, command: str):
        from pentest_project.models import Action
        from pentest_project.tasks import run_action_terminal
        actions = [Action(name=name, command=command, worker=worker) for worker in self.all()]
        for action in actions:
            pre_save.send(sender=Action, instance=action, raw=False, using=Action.objects.db)
        saved_instances = Action.objects.bulk_create(actions)
        for action in saved_instances:
            post_save.send(sender=Action, instance=action, created=True, raw=False, using=Action.objects.db)
            run_action_terminal.apply_async((action.pk,), countdown=TASK_COUNTDOWN)
        return actions


WorkerManager = models.Manager.from_queryset(WorkerQuerySet)
