import logging
import os
import socket

import requests
from django.conf import settings
from django.urls import reverse
from requests import HTTPError

from pentest_worker.compress import create_memory_tar
from pentest_worker.crypto import register_signer


def get_client_ip(request):
    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
    if x_forwarded_for:
        ip = x_forwarded_for.split(',')[0]
    else:
        ip = request.META.get('REMOTE_ADDR')
    return ip


def get_server_name():
    return settings.WORKER_NAME or socket.gethostname()


def get_ip_info():
    return requests.get('http://ipinfo.io/json').json()


def get_worker_token():
    if not os.path.lexists(settings.PENTEST_WORKER_TOKEN_FILE):
        register_worker()
    with open(settings.PENTEST_WORKER_TOKEN_FILE, 'r') as f:
        return f.read().strip()


def save_worker_token(token):
    with open(settings.PENTEST_WORKER_TOKEN_FILE, 'w') as f:
        return f.write(token)


def register_worker():
    ip_info = get_ip_info()
    r = requests.post('{}{}'.format(settings.PENTEST_STUDIO_URL.rstrip('/'), reverse('server-list')), {
        'url': settings.WORKER_URL,
        'name': get_server_name(),
        'ip': ip_info['ip'],
        'country': ip_info['country'],
    }, headers={'X-Register': register_signer.sign({'command': 'register'}, ip_info['ip'])})
    try:
        r.raise_for_status()
    except HTTPError:
        logging.error('Return text in register_worker(): {}'.format(r.text))
        raise
    save_worker_token(r.json()['key'])


def upload_worker_data(term_name):
    directory = os.path.join(settings.WORKER_ACTIONS_TEMP_DIRECTORY, term_name)
    tar = create_memory_tar(directory)
    url = '{}{}'.format(settings.PENTEST_STUDIO_URL.rstrip('/'),
                        reverse('action-worker-upload', kwargs={'pk': term_name}))
    requests.put(url, files={'file': tar},
                 headers={'Authorization': 'Token {}'.format(get_worker_token())})
