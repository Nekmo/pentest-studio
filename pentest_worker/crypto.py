from django.conf import settings
from django.core.signing import dumps, loads, BadSignature


class PentestSigner:
    def __init__(self, key, max_age=None):
        self.key = key
        self.max_age = max_age

    def validation_object(self, **kwargs):
        return {key: value for key, value in kwargs.items() if value is not None}

    def sign(self, data=None, src_ip=None):
        return dumps(self.validation_object(data=data, src_ip=src_ip), key=self.key)

    def unsing(self, data, src_ip=None, max_age=None):
        max_age = max_age or self.max_age
        unsigned = loads(data, max_age=max_age, key=self.key)
        if unsigned.get('src_ip') and unsigned['src_ip'] != src_ip:
            raise BadSignature('IP "{}" does not match'.format(src_ip))
        return unsigned.get('data')


# Register worker in pentest studio server
register_signer = PentestSigner(settings.REGISTER_SECRET_KEY, 20)
