"""
https://medium.com/@ismailakkila/black-hat-python-encrypt-and-decrypt-with-rsa-cryptography-bd6df84d65bc
"""
import json
import time

from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import base64
import zlib

from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import padding

# ch9_encrypt_blob.py

# Our Encryption Function


ALLOWED_LOCAL_IPS = ['127.0.0.1']


def encrypt_blob(blob, public_key):
    # Import the Public Key and use for encryption using PKCS1_OAEP
    rsa_key = RSA.importKey(public_key)
    rsa_key = PKCS1_OAEP.new(rsa_key)

    # compress the data first
    blob = zlib.compress(blob)

    # In determining the chunk size, determine the private key length used in bytes
    # and subtract 42 bytes (when using PKCS1_OAEP). The data will be in encrypted
    # in chunks
    chunk_size = 470
    offset = 0
    end_loop = False
    encrypted =  ""

    while not end_loop:
        # The chunk
        chunk = blob[offset:offset + chunk_size]

        # If the data chunk is less then the chunk size, then we need to add
        # padding with " ". This indicates the we reached the end of the file
        # so we end loop here
        if len(chunk) % chunk_size != 0:
            end_loop = True
            chunk += b" " * (chunk_size - len(chunk))

        # Append the encrypted chunk to the overall encrypted file
        encrypted += rsa_key.encrypt(chunk)

        # Increase the offset by chunk size
        offset += chunk_size

    # Base 64 encode the encrypted file
    return base64.b64encode(encrypted)


# Our Decryption Function
def decrypt_blob(encrypted_blob, private_key):

    # Import the Private Key and use for decryption using PKCS1_OAEP
    rsakey = RSA.importKey(private_key)
    rsakey = PKCS1_OAEP.new(rsakey)

    # Base 64 decode the data
    encrypted_blob = base64.b64decode(encrypted_blob)

    # In determining the chunk size, determine the private key length used in bytes.
    # The data will be in decrypted in chunks
    chunk_size = 512
    offset = 0
    decrypted = ""

    # keep loop going as long as we have chunks to decrypt
    while offset < len(encrypted_blob):
        # The chunk
        chunk = encrypted_blob[offset: offset + chunk_size]

        # Append the decrypted chunk to the overall decrypted file
        decrypted += rsakey.decrypt(chunk)

        # Increase the offset by chunk size
        offset += chunk_size

    # return the decompressed decrypted data
    return zlib.decompress(decrypted)


def read_key(key_file):
    with open(key_file, 'rb') as f:
        return f.read()


def _signing(key, message):
    message = base64.b64encode(message.encode())
    private_key = serialization.load_pem_private_key(
        read_key(key),
        password=None,
        backend=default_backend()
    )
    signature = private_key.sign(
        message,
        padding.PSS(
            mgf=padding.MGF1(hashes.SHA256()),
            salt_length=padding.PSS.MAX_LENGTH
        ),
        hashes.SHA256()
    )
    return '{}:{}'.format(message.decode('utf-8'), base64.b64encode(signature).decode('utf-8'))


def _verify(key, message):
    public_key = serialization.load_pem_public_key(
        read_key(key),
        backend=default_backend()
    )
    message, signature = message.split(':', 1)
    signature = base64.b64decode(signature)
    public_key.verify(
        signature,
        message.encode(),
        padding.PSS(
            mgf=padding.MGF1(hashes.SHA256()),
            salt_length=padding.PSS.MAX_LENGTH
        ),
        hashes.SHA256()
    )
    return base64.b64decode(message)


def encrypt(key_file, data, src_ip=None):
    to_encrypt = {'data': data, 'time': int(time.time()), 'src_ip': src_ip}
    to_encrypt = json.dumps(to_encrypt)
    return _signing(key_file, to_encrypt)
    # return encrypt_blob(to_encrypt, read_key(key_file))


def decrypt(key_file, data, max_age=20, src_ip=None):
    decrypted = _verify(key_file, data)
    decrypted = json.loads(decrypted)
    age = time.time() - decrypted.get('time', 0)
    if max_age and age > max_age:
        raise ValueError('Invalid signed age: {}'.format(age))
    if src_ip and (decrypted['src_ip'] != src_ip and src_ip not in ALLOWED_LOCAL_IPS):
        raise ValueError('IP "{}" does not match'.format(src_ip))
    return decrypted['data']


# # Use the public key for encryption
# fd = open("public_key.pem", "rb")
# public_key = fd.read()
# fd.close()
#
# # Our candidate file to be encrypted
# fd = open("img.jpg", "rb")
# unencrypted_blob = fd.read()
# fd.close()
#
# encrypted_blob = encrypt_blob(unencrypted_blob, public_key)
#
# # Write the encrypted contents to a file
# fd = open("encrypted_img.jpg", "wb")
# fd.write(encrypted_blob)
# fd.close()
#
#
#
# #  ch9_decrypt_blob.py
#
#
# # Use the private key for decryption
# fd = open("private_key.pem", "rb")
# private_key = fd.read()
# fd.close()
#
# # Our candidate file to be decrypted
# fd = open("encrypted_img.jpg", "rb")
# encrypted_blob = fd.read()
# fd.close()
#
# # Write the decrypted contents to a file
# fd = open("decrypted_img.jpg", "wb")
# fd.write(decrypt_blob(encrypted_blob, private_key))
# fd.close()
