import json
import logging
import os
import socket
from functools import cache
from pathlib import Path
from typing import TypedDict

import requests
from django.conf import settings
from django.urls import reverse
from requests import HTTPError

from pentest_worker.crypto import register_signer

CONFIG_FILE = 'config.json'


class Config(TypedDict):
    id: int
    key: str


def get_server_name():
    return settings.WORKER_NAME or socket.gethostname()


def get_ip_info():
    return requests.get('http://ipinfo.io/json').json()


def get_worker_dir() -> Path:
    return Path(os.environ['WORKER_DIR'])


@cache
def get_worker_config() -> Config:
    worker_dir = get_worker_dir()
    os.makedirs(worker_dir, exist_ok=True)
    config_file = worker_dir / CONFIG_FILE
    if not os.path.lexists(config_file):
        save_worker_token(config_file, register_worker())
    with open(config_file, 'r') as f:
        return json.load(f)


def save_worker_token(config_file: str or Path, data: Config) -> None:
    with open(config_file, 'w') as f:
        json.dump(data, f)


def register_worker() -> Config:
    ip_info = get_ip_info()
    r = requests.post('{}{}'.format(settings.PENTEST_STUDIO_URL.rstrip('/'), reverse('server-list')), {
        'url': settings.WORKER_URL,
        'name': get_server_name(),
        'ip': ip_info['ip'],
        'country': ip_info['country'],
    }, headers={'X-Register': register_signer.sign({'command': 'register'}, ip_info['ip'])})
    try:
        r.raise_for_status()
    except HTTPError:
        logging.error('Return text in register_worker(): {}'.format(r.text))
        raise
    return r.json()
