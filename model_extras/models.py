from django.contrib.auth import get_user_model
from django.contrib.contenttypes.fields import GenericForeignKey
from django.contrib.contenttypes.models import ContentType
from django.db import models
from django.utils.functional import cached_property

from model_extras.managers import ContentObjectManager

REACTIONS = [
    ('+1', '+1'),
    ('-1', '-1'),
    ('heart', 'heart'),
    ('laugh', 'laugh'),
    ('hooray', 'hooray'),
    ('confused', 'confused'),
]


class DateModelBase(models.Model):
    """Add creation and updated date fields.
    """
    created_at = models.DateTimeField(auto_now_add=True, db_index=True)
    updated_at = models.DateTimeField(auto_now=True, db_index=True)

    class Meta:
        abstract = True


class CommonModelBase(DateModelBase):
    """common options for models.
    """

    @property
    def name(self):
        raise NotImplementedError

    def __repr__(self):
        return '<{} {}>'.format(self.__class__.__name__, self.name)

    def __str__(self):
        return self.name

    class Meta:
        abstract = True


class AttachmentBase(CommonModelBase):
    """File attachment base model.
    """
    filename = models.CharField(max_length=200, blank=True)
    mimetype = models.CharField(max_length=150, db_index=True)
    checksum = models.CharField(max_length=64, db_index=True)
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.PositiveIntegerField(db_index=True)
    content_object = GenericForeignKey('content_type', 'object_id')
    attachment = models.FileField()

    @property
    def name(self):
        return self.filename or self.checksum

    class Meta:
        abstract = True


class CreatedByModelBase(models.Model):
    """Add created by and updated by fields
    """
    created_by = models.ForeignKey(get_user_model(), null=True, on_delete=models.SET_NULL, related_name='+')
    updated_by = models.ForeignKey(get_user_model(), null=True, on_delete=models.SET_NULL, related_name='+')

    class Meta:
        abstract = True


class Reaction(CommonModelBase):
    """Model for create a social model reaction.
    """
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.PositiveIntegerField(db_index=True)
    content_object = GenericForeignKey('content_type', 'object_id')
    created_by = models.ForeignKey(get_user_model(), blank=True, null=True, on_delete=models.SET_NULL)
    reaction = models.CharField(max_length=16, choices=REACTIONS)

    @property
    def name(self):
        return 'by {}: {}'.format(self.created_by, self.reaction)


class Note(CommonModelBase, CreatedByModelBase):
    """Notes availables for any model.
    """
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.PositiveIntegerField(db_index=True)
    content_object = GenericForeignKey('content_type', 'object_id')
    note = models.TextField()
    is_private = models.BooleanField(default=True, db_index=True)

    objects = ContentObjectManager()

    @property
    def name(self):
        return 'by {}: {}{}'.format(self.created_by, self.note[:100], '...' if len(self.note) > 100 else '')
