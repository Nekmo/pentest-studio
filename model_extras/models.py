from django.contrib.auth import get_user_model
from django.contrib.contenttypes.fields import GenericForeignKey
from django.contrib.contenttypes.models import ContentType
from django.db import models
from django.utils.functional import cached_property

from model_extras.managers import ContentObjectManager

REACTIONS = [
    ('+1', '+1'),
    ('-1', '-1'),
    ('heart', 'heart'),
    ('laugh', 'laugh'),
    ('hooray', 'hooray'),
    ('confused', 'confused'),
]


class DateModel(models.Model):
    """Add creation and updated date fields.
    """
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        abstract = True


class CommonModel(DateModel):
    """common options for models.
    """

    def notes(self):
        return Note.objects.filter(content_object=self)

    @cached_property
    def notes_count(self):
        return self.notes().count()

    @property
    def name(self):
        raise NotImplementedError

    def __repr__(self):
        return '<{} {}>'.format(self.__class__.__name__, self.name)

    def __str__(self):
        return self.name

    class Meta:
        abstract = True


class ReactionBase(CommonModel):
    """Base model for create a social model reaction.

    Inherit this model and add the ForeignKey to the model (for example, a Note)
    """
    created_by = models.ForeignKey(get_user_model(), blank=True, null=True, on_delete=models.SET_NULL)
    reaction = models.CharField(max_length=16, choices=REACTIONS)

    @property
    def name(self):
        return 'by {}: {}'.format(self.created_by, self.reaction)

    class Meta(CommonModel.Meta):
        abstract = True


class CreatedByModel(models.Model):
    """Add created by and updated by fields
    """
    created_by = models.ForeignKey(get_user_model(), null=True, on_delete=models.SET_NULL, related_name='+')
    updated_by = models.ForeignKey(get_user_model(), null=True, on_delete=models.SET_NULL, related_name='+')

    class Meta:
        abstract = True


class ReactionsModel(models.Model):
    """Methods for work with reactions in the model.

    A model using ReactionBase is required for use ReactionsModel. Example:

    class MyModelReaction(ReactionBase):
        my_model = models.ForeignKey(MyModel, on_delete=models.CASCADE, related_name='reactions')
    """
    def toggle_reaction(self, reaction: str, by: get_user_model()):
        """Add or remove a reaction
        """
        assert reaction in REACTIONS, "{} isn't a reaction. Valid reactions: {}".format(
            reaction, ', '.join(map(lambda x: x[0], REACTIONS)))
        reaction, exists = self.reactions.get_or_create(created_by=by, reaction=reaction)
        if exists:
            reaction.delete()
        else:
            reaction.save()

    class Meta:
        abstract = True


class Note(CommonModel, ReactionsModel, CreatedByModel):
    """Notes availables for any model.
    """
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.PositiveIntegerField()
    content_object = GenericForeignKey('content_type', 'object_id')
    note = models.TextField()
    is_private = models.BooleanField(default=True)

    objects = ContentObjectManager()

    @property
    def name(self):
        return 'by {}: {}{}'.format(self.created_by, self.note[:100], '...' if len(self.note) > 100 else '')


class NoteReaction(ReactionBase):
    """Reaction for a note.
    """
    note = models.ForeignKey(Note, on_delete=models.CASCADE, related_name='reactions')


class AttachmentBase(CommonModel):
    """File attachment base model.
    """
    filename = models.CharField(max_length=200, blank=True)
    mimetype = models.CharField(max_length=150)
    checksum = models.CharField(max_length=64)
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.PositiveIntegerField()
    content_object = GenericForeignKey('content_type', 'object_id')
    attachment = models.FileField()

    @property
    def name(self):
        return self.filename or self.checksum

    class Meta:
        abstract = True
