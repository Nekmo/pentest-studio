import os
import random
import re
from typing import Optional

from django.conf import settings
from django.contrib.auth import get_user_model
from django.contrib.contenttypes.fields import GenericRelation
from django.contrib.postgres.fields import JSONField
from django.db import models
from django.utils.translation import gettext as _

# Create your models here.
from model_extras.models import AttachmentBase, CreatedByModel, CommonModel, DateModel
from pentest_worker.connections import get_client_ip
from pentest_worker.models import Server
from pentest_worker.rsa import encrypt

STATUSES = [
    ('RUNNING', _('Running')),
    ('PENDING', _('Pending')),
    ('SUCCESS', _('Success')),
    ('FINISHED', _('Finished')),
    ('ERROR', _('Error')),
    ('LOST', _('Lost')),
]


class Attachment(AttachmentBase, CreatedByModel):
    use_in_worker = models.BooleanField(default=False)


class Project(DateModel, CreatedByModel):
    name = models.CharField(max_length=140, db_index=True)
    type = models.CharField(max_length=40, db_index=True, blank=True)
    data = JSONField(default=dict)
    parent = models.ForeignKey('self', blank=True, null=True, on_delete=models.CASCADE)
    url = models.URLField(max_length=2000, blank=True)
    attachments = GenericRelation(Attachment, related_query_name='projects')
    description = models.TextField(blank=True)


class Action(DateModel, CreatedByModel):
    # Project is null to run manual actions or install worker updates.
    project = models.ForeignKey(Project, on_delete=models.CASCADE, blank=True, null=True,
                                related_name='actions')
    name = models.CharField(max_length=200)
    parent = models.ForeignKey('self', blank=True, null=True, on_delete=models.SET_NULL)
    is_last = models.BooleanField(default=False)
    attachments = GenericRelation(Attachment, related_query_name='actions')
    plugin = models.CharField(max_length=64, blank=True)
    shortcut_id = models.CharField(max_length=64, blank=True)
    # TODO: data = JSONField(default=dict)
    command = models.TextField(blank=True)
    status = models.CharField(choices=STATUSES, max_length=12, default='PENDING')
    task_id = models.CharField(max_length=64, blank=True)
    server = models.ForeignKey(Server, on_delete=models.SET_NULL, blank=True, null=True,
                               help_text=_('Machine assigned to execute the task.'))
    completed_at = models.DateTimeField(blank=True, null=True)
    is_read = models.BooleanField(default=False)
    read_by = models.ForeignKey(get_user_model(), blank=True, null=True,
                                on_delete=models.SET_NULL)

    @property
    def is_custom_command(self):
        return not self.plugin and not self.shortcut_id

    def get_terminal_url(self):
        if not self.server and self.is_custom_command and self.status == 'PENDING':
            self.server = Server.objects.best()
            self.status = 'RUNNING'
            self.save()
        if self.status != 'RUNNING' or not self.server:
            return
        url = self.server.websocket_url
        return '{}/_websocket/{}'.format(url.rstrip('/'), self.pk)

    def get_terminal_auth(self, request):
        return encrypt(settings.PENTEST_STUDIO_PRIVATE_KEY, {'action': self.pk}, src_ip=get_client_ip(request))

    def get_data_directory(self):
        return os.path.join(settings.SERVER_ACTIONS_DIRECTORY, str(self.project.pk), str(self.pk))

    def get_terminal_path(self):
        return os.path.join(self.get_data_directory(), 'asciinema.cast')

    def get_return_code(self) -> Optional[str]:
        if not os.path.lexists(self.get_terminal_path()):
            return
        with open(self.get_terminal_path()) as f:
            data = f.read()
        codes = re.findall(r'\[Pentest Studio\] Return code: (\d+)', data)
        if codes:
            return int(codes[-1])

    def block_task(self, server: Server):
        self.status = 'RUNNING'
        self.server = server
