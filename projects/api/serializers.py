from drf_writable_nested import WritableNestedModelSerializer
from rest_framework import serializers

from pentest_studio.api import BaseSerializerMixin
from projects.models import Project, Action


class ProjectSerializer(BaseSerializerMixin, serializers.HyperlinkedModelSerializer):

    class Meta:
        model = Project
        fields = ('name', 'type', 'parent', 'url', 'created_by', 'updated_by',
                  'created_at', 'updated_at')


class ActionSerializer(BaseSerializerMixin, WritableNestedModelSerializer):
    project = ProjectSerializer()

    class Meta:
        model = Action
        fields = ('project', 'name', 'parent', 'is_last', 'plugin', 'shortcut_id', 'command',
                  'status', 'task_id', 'server', 'completed_at', 'is_read', 'read_by',
                  'created_at', 'updated_at')


class DetailActionSerializer(ActionSerializer):
    terminal_url = serializers.SerializerMethodField()
    terminal_auth = serializers.SerializerMethodField()

    def get_terminal_url(self, instance: Action):
        return instance.get_terminal_url()

    def get_terminal_auth(self, instance: Action):
        # self.context['request']
        return instance.get_terminal_auth(self.context['request'])

    class Meta(ActionSerializer.Meta):
        fields = ActionSerializer.Meta.fields + ('terminal_url', 'terminal_auth')


class DetailProjectSerializer(ProjectSerializer):
    actions = ActionSerializer(many=True, required=False)

    class Meta(ProjectSerializer.Meta):
        fields = ProjectSerializer.Meta.fields + ('data', 'parent', 'description', 'actions')



class PluginShortcutArgSerializer(serializers.Serializer):
    id = serializers.CharField()
    type = serializers.CharField()


class PluginShortcutEnvSerializer(serializers.Serializer):
    key = serializers.CharField()
    value = serializers.CharField()


class PluginShortcutSerializer(serializers.Serializer):
    id = serializers.SerializerMethodField()
    name = serializers.CharField()
    help = serializers.CharField()
    command = serializers.CharField()
    args = PluginShortcutArgSerializer(many=True)
    envs = PluginShortcutEnvSerializer(many=True)

    def get_id(self, obj):
        id_ = obj['id']
        return '.'.join([id_[0].split('.')[0], id_[1]])


class PluginSetupSerializer(serializers.Serializer):
    test = serializers.CharField()
    install = serializers.CharField()


class PluginSerializer(serializers.Serializer):
    id = serializers.SerializerMethodField()
    name = serializers.CharField()
    description = serializers.CharField()
    setup = PluginSetupSerializer()
    shortcuts = PluginShortcutSerializer(many=True)

    def get_id(self, obj):
        return obj['id'].split('.')[0]
